name: Deploy to Production

on:
  workflow_dispatch: {}

jobs:
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker login (Docker Hub)
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login docker.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          pull: true
          no-cache: true
          tags: ${{ secrets.DOCKER_USERNAME }}/webapp_backend:latest

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          pull: true
          no-cache: true
          tags: ${{ secrets.DOCKER_USERNAME }}/webapp_frontend:latest
          build-args: |
            REACT_APP_API_BASE_URL=http://100.107.240.37:8000   # <-- ÁTÍRHATOD a saját Tailscale IP-dre

  deploy:
    name: Deploy on Server (Self-hosted)
    runs-on: self-hosted
    needs: build
    concurrency:
      group: deploy-production
      cancel-in-progress: true
    steps:
      - name: Docker login (server)
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login docker.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Stop old containers (if any)
        run: |
          docker rm -f webapp_backend  || true
          docker rm -f webapp_frontend || true
          docker ps --filter "publish=8000" -q | xargs -r docker rm -f
          docker ps --filter "publish=3000" -q | xargs -r docker rm -f

      - name: Pull latest images
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/webapp_backend:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/webapp_frontend:latest

      - name: Verify python-multipart in backend image
        run: |
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/webapp_backend:latest python - <<'PY'
          import pkgutil, sys
          sys.exit(0 if pkgutil.find_loader('multipart') else 1)
          PY

      - name: Run backend
        run: |
          docker run -d --name webapp_backend --restart=always \
            -p 8000:8000 \
            ${{ secrets.DOCKER_USERNAME }}/webapp_backend:latest

      - name: Run frontend
        run: |
          docker run -d --name webapp_frontend --restart=always \
            -p 3000:80 \
            ${{ secrets.DOCKER_USERNAME }}/webapp_frontend:latest

      - name: Show running containers
        run: |
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}"
