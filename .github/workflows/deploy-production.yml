name: Deploy to Production

on:
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_BACKEND: dpatrik0630/webapp_backend
  IMAGE_FRONTEND: dpatrik0630/webapp_frontend
  TAG: latest

jobs:
  build-and-deploy:
    runs-on: self-hosted
    concurrency:
      group: deploy-production
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Build & Push backend image ---
      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          tags: ${{ env.IMAGE_BACKEND }}:${{ env.TAG }}
          push: true
          pull: true
          no-cache: true

      # --- Build & Push frontend image ---
      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          tags: ${{ env.IMAGE_FRONTEND }}:${{ env.TAG }}
          push: true
          pull: true
          no-cache: true

      # --- Docker login on server ---
      - name: Docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # --- Stop old containers ---
      - name: Stop old containers
        run: |
          docker rm -f webapp_backend || true
          docker rm -f webapp_frontend || true
          docker ps --filter "publish=8000" -q | xargs -r docker rm -f
          docker ps --filter "publish=3000" -q | xargs -r docker rm -f

      # --- Pull latest images ---
      - name: Pull latest images
        run: |
          docker pull ${{ env.IMAGE_BACKEND }}:${{ env.TAG }}
          docker pull ${{ env.IMAGE_FRONTEND }}:${{ env.TAG }}

      # --- Verify python-multipart is installed in backend image ---
      - name: Verify backend image
        run: |
          docker run --rm ${{ env.IMAGE_BACKEND }}:${{ env.TAG }} python - <<'PY'
          import pkgutil, sys
          sys.exit(0 if pkgutil.find_loader('multipart') else 1)
          PY

      # --- Run backend container ---
      - name: Run backend
        run: |
          docker run -d --name webapp_backend --restart=always \
            -p 8000:8000 \
            ${{ env.IMAGE_BACKEND }}:${{ env.TAG }}

      # --- Run frontend container ---
      - name: Run frontend
        run: |
          docker run -d --name webapp_frontend --restart=always \
            -p 3000:80 \
            ${{ env.IMAGE_FRONTEND }}:${{ env.TAG }}

      # --- Show running containers ---
      - name: Show containers
        run: |
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}"
